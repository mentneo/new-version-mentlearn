import { db } from '../firebase/firebase';
import { doc, setDoc, updateDoc, collection, addDoc, serverTimestamp, getDoc } from 'firebase/firestore';

// Razorpay Production API key
const RAZORPAY_KEY = 'rzp_live_RFqLLkkteSLfOY';

class RazorpayService {
  constructor() {
    this.loadScript();
  }

  loadScript() {
    return new Promise((resolve, reject) => {
      if (window.Razorpay) {
        console.log('Razorpay already loaded');
        resolve();
        return;
      }

      const script = document.createElement('script');
      script.src = 'https://checkout.razorpay.com/v1/checkout.js';
      script.async = true;
      
      script.onload = () => {
        console.log('Razorpay script loaded successfully');
        resolve();
      };
      
      script.onerror = (error) => {
        console.error('Failed to load Razorpay script:', error);
        reject(new Error('Failed to load Razorpay payment gateway. Please refresh the page or try again later.'));
      };
      
      document.body.appendChild(script);
    });
  }

  async createOrder(courseId, userData) {
    try {
      // Get course details first
      const courseRef = doc(db, 'courses', courseId);
      const courseSnap = await getDoc(courseRef);
      
      if (!courseSnap.exists()) {
        throw new Error('Course not found');
      }

      const courseData = courseSnap.data();
      if (!courseData.price) {
        throw new Error('Course price not set');
      }

      // Create an order in Firestore
      const orderRef = await addDoc(collection(db, 'razorpayOrders'), {
        amount: courseData.price * 100, // Convert to paisa
        currency: 'INR',
        userId: userData.id,
        status: 'created',
        createdAt: serverTimestamp(),
        courseId: courseId,
        courseName: courseData.name,
        courseType: courseData.type,
        creatorId: courseData.creatorId
      });

      return {
        id: orderRef.id,
        amount: amount * 100,
        currency: 'INR',
        courseId: courseData?.id || null,
        courseName: courseData?.name || null
      };
    } catch (error) {
      console.error('Error creating order:', error);
      throw new Error('Failed to create order: ' + error.message);
    }
  }

  async processPayment(orderData, userData, successCallback, failureCallback) {
    try {
      await this.loadScript();
      
      if (!window.Razorpay) {
        console.error('Razorpay not available after loading script');
        throw new Error('Payment gateway not available. Please refresh and try again.');
      }

      console.log('Configuring Razorpay payment options');
      
      // Verify orderData has required fields
      if (!orderData || !orderData.id || !orderData.amount) {
        console.error('Invalid order data:', orderData);
        throw new Error('Invalid payment information. Please try again.');
      }
      
      // Configure payment options
      const options = {
        key: RAZORPAY_KEY,
        amount: orderData.amount,
        currency: orderData.currency,
        name: 'Mentneo',
        description: `Payment for ${orderData.courseName || 'course'}`,
        order_id: orderData.id,
        prefill: {
          name: userData.name || '',
          email: userData.email || '',
          contact: userData.phone || ''
        },
        theme: {
          color: '#4F46E5'
        },
        modal: {
          confirm_close: true,
          ondismiss: () => {
            if (failureCallback) {
              failureCallback({
                message: "Payment cancelled by user",
                code: "PAYMENT_CANCELLED",
                source: "user"
              });
            }
          }
        },
        handler: async (response) => {
          try {
            console.log('Payment success response:', response);
            
            // Verify payment signature
            if (!this.verifyPaymentSignature(response)) {
              throw new Error('Invalid payment signature');
            }

            // Update order status
            await updateDoc(doc(db, 'razorpayOrders', orderData.id), {
              status: 'success',
              paymentId: response.razorpay_payment_id,
              updatedAt: serverTimestamp()
            });

            // Create enrollment
            await addDoc(collection(db, 'enrollments'), {
              userId: userData.id,
              courseId: orderData.courseId,
              orderId: orderData.id,
              paymentId: response.razorpay_payment_id,
              amount: orderData.amount,
              enrolledAt: serverTimestamp(),
              status: 'active'
            });

              // Send notifications to admin and creator
            const notificationPromises = [
              // Admin notification
              addDoc(collection(db, 'adminNotifications'), {
                type: 'payment_success',
                courseId: orderData.courseId,
                courseName: orderData.courseName,
                userId: userData.id,
                userName: userData.name,
                amount: orderData.amount / 100,
                paymentId: response.razorpay_payment_id,
                createdAt: serverTimestamp(),
                status: 'unread',
                title: 'New Course Payment',
                message: `${userData.name} has enrolled in ${orderData.courseName}`
              }),
              // Creator notification
              addDoc(collection(db, 'creatorNotifications'), {
                type: 'course_purchase',
                courseId: orderData.courseId,
                courseName: orderData.courseName,
                userId: userData.id,
                userName: userData.name,
                amount: orderData.amount / 100,
                paymentId: response.razorpay_payment_id,
                createdAt: serverTimestamp(),
                status: 'unread',
                title: 'New Course Purchase',
                message: `${userData.name} has purchased your course ${orderData.courseName}`,
                creatorId: orderData.creatorId
              })
            });
            
            if (successCallback) {
              successCallback(response, { verified: true });
            }
          } catch (error) {
            console.error('Error handling payment:', error);
            if (failureCallback) {
              failureCallback({
                message: error.message || "Payment processing failed",
                code: "PAYMENT_FAILED",
                source: "server",
                details: error
              });
            }
          }
        }
      };

      // Add payment failed handler
      const razorpay = new window.Razorpay(options);
      razorpay.on('payment.failed', async (response) => {
        console.error('Payment failed:', response);
        
        await updateDoc(doc(db, 'razorpayOrders', orderData.id), {
          status: 'failed',
          paymentId: response.error?.metadata?.payment_id,
          errorMessage: response.error?.description,
          updatedAt: serverTimestamp()
        });
        
        if (failureCallback) {
          failureCallback({
            message: response.error?.description || "Payment failed",
            code: response.error?.code || "UNKNOWN_ERROR",
            source: "razorpay",
            metadata: response.error?.metadata || {}
          });
        }
      });

      console.log('Opening Razorpay payment dialog');
      razorpay.open();
      return true;
    } catch (error) {
      console.error('Error processing payment:', error);
      if (failureCallback) {
        failureCallback({
          message: error.message || "Payment processing failed",
          code: "PROCESSING_ERROR",
          source: "system",
          error: error
        });
      }
      throw error;
    }
  }

  async updatePaymentStatus(orderId, status, paymentId, userId, courseId) {
    try {
      if (!orderId || !status || !userId) {
        throw new Error('Missing required parameters for payment status update');
      }

      // Update the order document
      const orderRef = doc(db, 'razorpayOrders', orderId);
      await updateDoc(orderRef, {
        status: status,
        paymentId: paymentId || null,
        userId: userId,
        courseId: courseId || null,
        updatedAt: serverTimestamp()
      });

      // Create a new payment record
      await addDoc(collection(db, 'payments'), {
        orderId: orderId,
        paymentId: paymentId,
        userId: userId,
        courseId: courseId || null,
        status: status,
        provider: 'razorpay',
        timestamp: serverTimestamp()
      });

      return true;
    } catch (error) {
      console.error('Error updating payment status:', error);
      throw new Error(`Failed to update payment status: ${error.message}`);
    }
  }

  async enrollUserInCourse(userId, courseId) {
    try {
      // Verify user permissions
      const userRef = doc(db, "users", userId);
      const userSnapshot = await getDoc(userRef);
      
      if (!userSnapshot.exists()) {
        throw new Error('User not found');
      }

      const userData = userSnapshot.data();
      if (userData.role === 'banned' || userData.role === 'suspended') {
        throw new Error("Your account doesn't have permission to enroll in courses");
      }
      
      // Create enrollment document
      await addDoc(collection(db, 'enrollments'), {
        userId: userId,
        courseId: courseId,
        status: 'active',
        enrolledAt: serverTimestamp(),
        accessUntil: new Date(Date.now() + 365 * 24 * 60 * 60 * 1000) // 1 year access
      });

      // Update user document
      await updateDoc(userRef, {
        hasPaid: true,
        courseId: courseId,
        enrollmentStatus: 'active',
        updatedAt: serverTimestamp()
      });

      return true;
    } catch (error) {
      console.error('Error enrolling user:', error);
      throw error;
    }
  }

  verifyPaymentSignature(response) {
    if (!response.razorpay_payment_id || !response.razorpay_order_id || !response.razorpay_signature) {
      console.error('Missing required payment verification fields');
      return false;
    }

    try {
      // Get signature fields
      const { razorpay_order_id, razorpay_payment_id, razorpay_signature } = response;

      // Build signature validation string
      const signatureString = `${razorpay_order_id}|${razorpay_payment_id}`;

      // In production, make an API call to your backend to verify the signature
      // The backend should use Razorpay's SDK to verify the signature
      // Example backend endpoint: '/api/verify-razorpay-signature'
      
      // For now, validate at least the fields are present and well-formed
      if (!razorpay_signature.match(/^[a-f0-9]{40}$/i)) {
        console.error('Invalid signature format');
        return false;
      }

      // TODO: Replace with actual server-side verification
      // const response = await fetch('/api/verify-razorpay-signature', {
      //   method: 'POST',
      //   headers: { 'Content-Type': 'application/json' },
      //   body: JSON.stringify({ orderId: razorpay_order_id, paymentId: razorpay_payment_id, signature: razorpay_signature })
      // });
      // return response.ok;

      return true;
    } catch (error) {
      console.error('Payment signature verification failed:', error);
      return false;
    }
  }
}

const razorpayService = new RazorpayService();
export default razorpayService;